# Generated by Django 3.2.20 on 2023-08-15 14:04

from django.apps.registry import Apps
from django.db import migrations
from django.db.models import Count, Prefetch
from django.db.backends.base.schema import BaseDatabaseSchemaEditor


def remove_redundant_feature_states(apps: Apps, schema_editor: BaseDatabaseSchemaEditor) -> None:
    feature_segment_model_class = apps.get_model("features", "featuresegment")
    feature_state_model_class = apps.get_model("features", "featurestate")

    for feature_segment in (
        feature_segment_model_class.objects.annotate(
            num_feature_states=Count("feature_states")
        )
        .prefetch_related(
            Prefetch(
                "feature_states",
                queryset=feature_state_model_class.objects.order_by("-live_from"),
            )
        )
        .filter(num_feature_states__gt=1)
    ):
        for feature_state in feature_segment.feature_states.all().order_by("-live_from")[1:]:
            feature_state.delete()


class Migration(migrations.Migration):
    dependencies = [
        ("features", "0059_fix_feature_type"),
    ]

    operations = [
        migrations.RunPython(
            remove_redundant_feature_states, reverse_code=migrations.RunPython.noop
        ),
    ]
